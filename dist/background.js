(()=>{"use strict";({994:function(e,o){var n=this&&this.__awaiter||function(e,o,n,t){return new(n||(n=Promise))((function(c,r){function s(e){try{i(t.next(e))}catch(e){r(e)}}function a(e){try{i(t.throw(e))}catch(e){r(e)}}function i(e){var o;e.done?c(e.value):(o=e.value,o instanceof n?o:new n((function(e){e(o)}))).then(s,a)}i((t=t.apply(e,o||[])).next())}))};Object.defineProperty(o,"__esModule",{value:!0});let t=null,c={},r={};function s(e){return n(this,void 0,void 0,(function*(){const o=yield chrome.tabs.query({url:"https://gemini.google.com/*"});if(0===o.length)return;const n=o[0];if(n&&void 0!==n.id){const o=n.id;if(!c[o])return console.warn(`[MCP-Background] Tab ${o} is not ready yet. Queuing message.`,e),r[o]||(r[o]=[]),void r[o].push(e);chrome.tabs.sendMessage(o,e)}}))}!function e(){try{console.log("[MCP-Background] Attempting to connect to native host..."),t=chrome.runtime.connectNative("com.example.gemini_mcp_gateway"),t.onMessage.addListener((e=>{s(e)})),t.onDisconnect.addListener((()=>{console.log("%c[MCP-Background] Disconnected from native host.","color: red;");const o=chrome.runtime.lastError;o&&o.message&&console.error("[MCP-Background] Disconnect error:",o.message),t=null,setTimeout(e,5e3)})),console.log("%c[MCP-Background] Successfully connected to native host.","color: orange;"),chrome.tabs.query({url:"https://gemini.google.com/*"},(e=>{e.forEach((e=>{e.id&&(console.log(`[MCP-Background] Sending readiness check to Tab ID: ${e.id}`),chrome.tabs.sendMessage(e.id,{command:"areYouReady"}))}))}))}catch(o){o&&o.message?console.error("[MCP-Background] Failed to connect:",o.message):console.error("[MCP-Background] Failed to connect with an unknown error."),setTimeout(e,5e3)}}(),chrome.runtime.onMessage.addListener(((e,o)=>{var n;if(o.tab&&(null===(n=o.tab.url)||void 0===n?void 0:n.includes("gemini.google.com"))){const n=o.tab.id;if(n&&"content_ready"===e.type)return console.log(`%c[MCP-Background] Tab ID: ${n} is now ready.`,"color: green;"),c[n]=!0,void(r[n]&&r[n].length>0&&(console.log(`[MCP-Background] Sending ${r[n].length} queued messages to Tab ID: ${n}`),r[n].forEach((e=>{chrome.tabs.sendMessage(n,e)})),delete r[n]));e.status&&t&&t.postMessage(e)}else!o.tab&&e.command&&s(e);return!0}))}})[994](0,{})})();
//# sourceMappingURL=background.js.map