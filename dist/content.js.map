{"version":3,"file":"content.js","mappings":"oBA0OA,WACI,MAAMA,EAAaC,aAAY,KACvBC,SAASC,cAON,yCANHC,cAAcJ,GArO1B,WACIK,QAAQC,IAAI,oEAEZ,MAAMC,EACU,sCADVA,EAEW,gCAFXA,EAGkB,4CAGlBC,EAAc,oBAEpB,IAAIC,EAAmB,KAEnBC,EAAkB,KAStB,SAASC,IACL,IACI,MAAMC,EAAeV,SAASW,iBAAiBN,GAC/C,OAA4B,IAAxBK,EAAaE,OACN,MACYF,EAAaA,EAAaE,OAAS,GACnCC,aAAe,IAAIC,MAC9C,CACA,MAAOC,GACH,OAAO,IACX,CACJ,CAkCA,SAASC,IAEDT,GACAA,EAAiBU,aACrB,MAAMC,EAAiBlB,SAASmB,KAChCZ,EAAmB,IAAIa,kBAAiB,KAEhCZ,GACAa,aAAab,GACjBA,EAAkBc,OAAOC,YAAW,KAChCpB,QAAQC,IAAI,wCACZ,MAAMoB,EAAYf,IAElB,GAAKe,EAAL,CAIArB,QAAQC,IAAI,0CAA0CoB,EAAUC,UAAU,EAAG,WAC7E,IAEI,MAAMC,EAAWC,eAAeC,QAAQtB,IAAgB,GACxDH,QAAQC,IAAI,8DAA8DsB,EAASD,UAAU,EAAG,WAE5FD,IAAcE,GACdvB,QAAQC,IAAI,oFACZD,QAAQC,IAAI,kEACZuB,eAAeE,QAAQvB,EAAakB,GACpCrB,QAAQC,IAAI,mEAvChC,SAAkC0B,GAC9B,MAAMC,EAAW,CAAEC,OAAQ,UAAWC,MAAO,mBAAoBC,QAAS,CAAEJ,KAAMA,IAClFK,OAAOC,QAAQC,YAAYN,EAC/B,CAqCoBO,CAAyBd,IAGzBrB,QAAQC,IAAI,iGAEpB,CACA,MAAOmC,GACHpC,QAAQY,MAAM,4EAA6EwB,EAC/F,CApBA,MAFIpC,QAAQC,IAAI,8DAuBjB,QAGPG,EAAiBiC,QAAQtB,EAAgB,CAAEuB,WAAW,EAAMC,SAAS,GACzE,CAoEA,SAASC,EAAsBC,GAC3B,MAAMC,EAAgB,CAAEb,OAAQ,QAASc,QAASF,GAClDT,OAAOC,QAAQC,YAAYQ,EAC/B,EA3IA,WACI,MAAME,EAActC,IAChBsC,IACA5C,QAAQC,IAAI,mEAAoE2C,GAChFpB,eAAeE,QAAQvB,EAAayC,GAE5C,CAuIAC,GASAb,OAAOC,QAAQa,UAAUC,aAAaJ,IAClC,OAAQA,EAAQK,SACZ,IAAK,cAEDhD,QAAQC,IAAI,wEACZ+B,OAAOC,QAAQC,YAAY,CAAEe,KAAM,kBACnC,MACJ,IAAK,YA/EKtB,EAiFGgB,EAAQZ,QAAQJ,KAhF1B,IAAIuB,SAASC,IAChB,IAEI,MAAMC,EAAevD,SAASC,cAAcI,GAC5C,IAAKkD,EAED,YADAD,GAAQ,GAIZC,EAAaC,QACbD,EAAa1C,YAAciB,EAE3B,MAAM2B,EAAa,IAAIC,MAAM,QAAS,CAAEC,SAAS,IACjDJ,EAAaK,cAAcH,GAC3BH,GAAQ,EACZ,CACA,MAAOvC,GACHuC,GAAQ,EACZ,MA8DmCO,MAAKC,IAC3BA,GACDnB,EAAsB,oBAE9B,MACJ,IAAK,YAvDF,IAAIU,SAASC,IAEhB,MAAMxD,EAAaC,aAAY,KAC3B,MAAMgE,EAAa/D,SAASC,cAAcI,GAC1C,GAAI0D,IAAeA,EAAWC,SAAU,CACpC9D,cAAcJ,GACd,IAEIiE,EAAWE,QACXjD,IACAsC,GAAQ,EACZ,CACA,MAAOvC,GACHuC,GAAQ,EACZ,CACJ,IACD,QAyCaO,MAAKC,IACRA,GACDnB,EAAsB,uBA1F1C,IAAkBb,EA8Fd,OAAO,KAGXK,OAAOC,QAAQC,YAAY,CAAEe,KAAM,iBACvC,CAcYc,MAEL,IACP,CAEAC,E","sources":["webpack://GeminiMcpGateway/./src/content.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * メイン処理を初期化する関数\n *\n * この関数はGemini Webページの準備ができた時点で呼び出され、\n * DOM操作やイベントリスナーの設定を行います。\n */\nfunction initializeMainLogic() {\n    console.log('[MCP-Content] Target frame confirmed. Initializing main logic...');\n    // Gemini Webページ上の要素を特定するためのセレクタ\n    const SELECTORS = {\n        INPUT_AREA: 'div[aria-label=\"ここにプロンプトを入力してください\"]',\n        SEND_BUTTON: 'button[aria-label=\"プロンプトを送信\"]',\n        RESPONSE_CONTAINER: 'div[id^=\"model-response-message-content\"]'\n    };\n    // 最後に送信した応答を記録するためのストレージキー\n    const STORAGE_KEY = 'mcp_last_response';\n    // DOM変更を監視するためのオブザーバー\n    let responseObserver = null;\n    // 応答テキスト取得のデバウンス処理用タイムアウトID\n    let debounceTimeout = null;\n    /**\n     * Geminiの応答テキストを抽出する関数\n     *\n     * ページ上のGeminiの応答コンテナから最新の応答テキストを取得します。\n     * 応答が見つからない場合やエラーが発生した場合はnullを返します。\n     *\n     * @returns 抽出された応答テキスト、または応答が見つからない場合はnull\n     */\n    function extractResponseText() {\n        try {\n            const allResponses = document.querySelectorAll(SELECTORS.RESPONSE_CONTAINER);\n            if (allResponses.length === 0)\n                return null;\n            const latestResponse = allResponses[allResponses.length - 1];\n            return (latestResponse.textContent || '').trim();\n        }\n        catch (error) {\n            return null;\n        }\n    }\n    /**\n     * セッションストレージを初期化する関数\n     *\n     * ページ読み込み時に既存の応答テキストがあれば、それをセッションストレージに\n     * 保存します。これにより、同じ応答が重複して送信されるのを防ぎます。\n     */\n    function primeSessionStorage() {\n        const initialText = extractResponseText();\n        if (initialText) {\n            console.log('[MCP-Content] Priming sessionStorage with initial last response:', initialText);\n            sessionStorage.setItem(STORAGE_KEY, initialText);\n        }\n    }\n    /**\n     * 応答テキストをバックグラウンドスクリプトに送信する関数\n     *\n     * Geminiからの応答テキストを適切な形式でバックグラウンドスクリプトに送信します。\n     * バックグラウンドスクリプトはこれをMCPサーバーに転送します。\n     *\n     * @param text - 送信する応答テキスト\n     */\n    function sendResponseToBackground(text) {\n        const response = { status: 'success', event: 'responseReceived', payload: { text: text } };\n        chrome.runtime.sendMessage(response);\n    }\n    /**\n     * Geminiの応答を監視するオブザーバーを開始する関数\n     *\n     * DOM変更を監視し、Geminiからの新しい応答テキストを検出します。\n     * 新しい応答が検出された場合、それをバックグラウンドスクリプトに送信します。\n     * デバウンス処理を行い、短時間に複数回の通知が発生するのを防ぎます。\n     * 診断ログを出力して、応答検出プロセスの各ステップを追跡します。\n     */\n    function startResponseObserver() {\n        // 既存のオブザーバーがあれば切断\n        if (responseObserver)\n            responseObserver.disconnect();\n        const observerTarget = document.body;\n        responseObserver = new MutationObserver(() => {\n            // デバウンス処理（短時間に複数回実行されるのを防ぐ）\n            if (debounceTimeout)\n                clearTimeout(debounceTimeout);\n            debounceTimeout = window.setTimeout(() => {\n                console.log('[MCP-Content] --- Observer Fired ---');\n                const finalText = extractResponseText();\n                // 応答テキストが取得できなかった場合\n                if (!finalText) {\n                    console.log('[MCP-Content] Observer fired, but no text was extracted.');\n                    return;\n                }\n                console.log(`[MCP-Content] Step 1: Extracted text: \"${finalText.substring(0, 20)}...\"`);\n                try {\n                    // 前回送信した応答テキストを取得\n                    const lastSent = sessionStorage.getItem(STORAGE_KEY) || '';\n                    console.log(`[MCP-Content] Step 2: Read from sessionStorage. lastSent: \"${lastSent.substring(0, 20)}...\"`);\n                    // 新しい応答テキストの場合のみ送信\n                    if (finalText !== lastSent) {\n                        console.log('[MCP-Content] Step 3: ✅ Text is new. Condition (finalText !== lastSent) is TRUE.');\n                        console.log('[MCP-Content] Step 4: Attempting to write to sessionStorage...');\n                        sessionStorage.setItem(STORAGE_KEY, finalText);\n                        console.log('[MCP-Content] Step 5: Write to sessionStorage seems successful.');\n                        sendResponseToBackground(finalText);\n                    }\n                    else {\n                        console.log('[MCP-Content] Step 3: ❌ Text is old (it matches sessionStorage). Condition is FALSE. Ignoring.');\n                    }\n                }\n                catch (e) {\n                    console.error('[MCP-Content] ❌ A CRITICAL ERROR occurred while accessing sessionStorage!', e);\n                }\n            }, 500); // 500ミリ秒のデバウンス時間\n        });\n        // body要素とその子孫要素の変更を監視\n        responseObserver.observe(observerTarget, { childList: true, subtree: true });\n    }\n    /**\n     * テキスト入力欄にテキストを設定する関数\n     *\n     * Geminiの入力欄に指定されたテキストを入力します。\n     * 入力が成功したかどうかをPromiseで返します。\n     *\n     * @param text - 入力するテキスト\n     * @returns 入力が成功したかどうかを示すPromise\n     */\n    function setInput(text) {\n        return new Promise((resolve) => {\n            try {\n                // 入力欄要素を取得\n                const inputElement = document.querySelector(SELECTORS.INPUT_AREA);\n                if (!inputElement) {\n                    resolve(false);\n                    return;\n                }\n                // テキストを入力\n                inputElement.focus();\n                inputElement.textContent = text;\n                // 入力イベントを発火させてGeminiに変更を通知\n                const inputEvent = new Event('input', { bubbles: true });\n                inputElement.dispatchEvent(inputEvent);\n                resolve(true);\n            }\n            catch (error) {\n                resolve(false);\n            }\n        });\n    }\n    /**\n     * 送信ボタンをクリックする関数\n     *\n     * Geminiの送信ボタンを探してクリックします。\n     * ボタンが有効になるまで待機し、クリック後に応答監視を開始します。\n     *\n     * @returns クリックが成功したかどうかを示すPromise\n     */\n    function clickSend() {\n        return new Promise((resolve) => {\n            // ボタンが有効になるまで定期的にチェック\n            const intervalId = setInterval(() => {\n                const sendButton = document.querySelector(SELECTORS.SEND_BUTTON);\n                if (sendButton && !sendButton.disabled) {\n                    clearInterval(intervalId);\n                    try {\n                        // ボタンをクリックして応答監視を開始\n                        sendButton.click();\n                        startResponseObserver();\n                        resolve(true);\n                    }\n                    catch (error) {\n                        resolve(false);\n                    }\n                }\n            }, 100); // 100ミリ秒ごとにチェック\n        });\n    }\n    /**\n     * エラーメッセージをバックグラウンドスクリプトに送信する関数\n     *\n     * 操作中にエラーが発生した場合、エラーメッセージを\n     * バックグラウンドスクリプトに送信します。\n     *\n     * @param errorMessage - 送信するエラーメッセージ\n     */\n    function sendErrorToBackground(errorMessage) {\n        const errorResponse = { status: 'error', message: errorMessage };\n        chrome.runtime.sendMessage(errorResponse);\n    }\n    // 初期化時にセッションストレージを準備\n    primeSessionStorage();\n    /**\n     * バックグラウンドスクリプトからのメッセージを処理するリスナー\n     *\n     * 以下のコマンドを処理します：\n     * - areYouReady: 準備状態の確認に応答\n     * - setInput: テキスト入力欄にテキストを設定\n     * - clickSend: 送信ボタンをクリック\n     */\n    chrome.runtime.onMessage.addListener((message) => {\n        switch (message.command) {\n            case 'areYouReady':\n                // バックグラウンドスクリプトからの点呼に応答して、準備完了を通知\n                console.log('[MCP-Content] Received readiness check. Replying with content_ready.');\n                chrome.runtime.sendMessage({ type: 'content_ready' });\n                break;\n            case 'setInput':\n                // テキスト入力コマンドを処理\n                setInput(message.payload.text).then(success => {\n                    if (!success)\n                        sendErrorToBackground('テキスト入力に失敗しました');\n                });\n                break;\n            case 'clickSend':\n                // 送信ボタンクリックコマンドを処理\n                clickSend().then(success => {\n                    if (!success)\n                        sendErrorToBackground('送信ボタンクリックに失敗しました');\n                });\n                break;\n        }\n        return true; // 非同期レスポンスを有効にする\n    });\n    // 初期化完了時にバックグラウンドスクリプトに準備完了を通知\n    chrome.runtime.sendMessage({ type: 'content_ready' });\n}\n/**\n * 特定の要素がDOMに表示されるまで待機する関数\n *\n * 指定されたセレクタに一致する要素がDOMに表示されるまで\n * 定期的にチェックし、要素が見つかったらコールバック関数を実行します。\n *\n * @param selector - 待機する要素のCSSセレクタ\n * @param callback - 要素が見つかった時に実行するコールバック関数\n */\nfunction pollForElement(selector, callback) {\n    const intervalId = setInterval(() => {\n        if (document.querySelector(selector)) {\n            clearInterval(intervalId);\n            callback();\n        }\n    }, 500); // 500ミリ秒ごとにチェック\n}\n// 入力欄が表示されるまで待機し、表示されたらメイン処理を初期化\npollForElement('div[aria-label=\"ここにプロンプトを入力してください\"]', initializeMainLogic);\n"],"names":["intervalId","setInterval","document","querySelector","clearInterval","console","log","SELECTORS","STORAGE_KEY","responseObserver","debounceTimeout","extractResponseText","allResponses","querySelectorAll","length","textContent","trim","error","startResponseObserver","disconnect","observerTarget","body","MutationObserver","clearTimeout","window","setTimeout","finalText","substring","lastSent","sessionStorage","getItem","setItem","text","response","status","event","payload","chrome","runtime","sendMessage","sendResponseToBackground","e","observe","childList","subtree","sendErrorToBackground","errorMessage","errorResponse","message","initialText","primeSessionStorage","onMessage","addListener","command","type","Promise","resolve","inputElement","focus","inputEvent","Event","bubbles","dispatchEvent","then","success","sendButton","disabled","click","callback","pollForElement"],"sourceRoot":""}